name: CITYBUILDER3000 CI/CD

on:
  push:
    branches: [main] # Déploiement automatique uniquement sur la branche main
  pull_request:
    branches: [main]

jobs:
  # ----------------------------------------------------
  # JOB 1 & 2 : TESTS UNITAIRES ET LINTING (RESTENT SIMILAIRES)
  # ----------------------------------------------------
  test-client:
    name: Test Client & Build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./client

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: './client/package-lock.json'
    - name: Install client dependencies
      run: npm ci
    - name: Run client tests
      run: npm test --if-present
    - name: Run client linter
      run: npm run lint --if-present
    # Cette étape est cruciale pour que le Dockerfile puisse trouver le dossier /dist
    - name: Build client
      run: npm run build --if-present 

  test-server:
    name: Test Server
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./server
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        cache-dependency-path: './server/package-lock.json'
    - name: Install server dependencies
      run: npm ci
    - name: Run server tests
      run: npm test --if-present
    - name: Run server linter
      run: npm run lint --if-present

  # ----------------------------------------------------
  # JOB 3 : AUDIT DE SÉCURITÉ
  # ----------------------------------------------------
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    continue-on-error: true  
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Audit client dependencies
      run: npm audit --prefix ./client --audit-level=high
    - name: Audit server dependencies
      run: npm audit --prefix ./server --audit-level=high
    - name: Generate audit report (if failure)
      if: failure()
      run: echo "::warning::Audit de sécurité a trouvé des failles de niveau élevé."

  # ----------------------------------------------------
  # JOB 4 : BUILD DES IMAGES DOCKER 
  # ----------------------------------------------------
  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    # Le build des images ne se fait que si les tests passent
    needs: [test-client, test-server] 
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    # Construire l'image du client (Nginx/Front-end)
    - name: Build Client Image
      uses: docker/build-push-action@v5
      with:
        context: ./client
        file: ./client/Dockerfile
        tags: citybuilder3000-client:latest
        push: false 

    # Construire l'image du serveur (Node.js/Back-end)
    - name: Build Server Image
      uses: docker/build-push-action@v5
      with:
        context: ./server
        file: ./server/Dockerfile
        tags: citybuilder3000-server:latest
        push: false
  
  # ----------------------------------------------------
  # JOB 5 : DÉPLOIEMENT SUR LA MACHINE VIRTUELLE (VM)
  # ----------------------------------------------------
  deploy:
    name: Deploy to VM via SSH
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main' # Déploie seulement si c'est la branche principale

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    # IMPORTANT : Configurer la clé SSH pour l'accès à la VM
    - name: Setup SSH Key
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.VM_KEY }} # Doit être configuré dans les secrets GitHub

    # Copier le projet complet sur la VM
    - name: Copy project files to VM
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} "mkdir -p /home/${{ secrets.VM_USER }}/citybuilder3000"
        rsync -avz --exclude 'node_modules' --exclude 'client/dist' ./ ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}:/home/${{ secrets.VM_USER }}/citybuilder3000/
        
    # Lancer Docker Compose sur la VM pour construire et démarrer les conteneurs
    - name: Deploy containers via Docker Compose
      run: |
        ssh ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} << 'EOF'
          cd /home/${{ secrets.VM_USER }}/citybuilder3000
          # --build: force la reconstruction des images locales à partir des Dockerfiles copiés
          # -d: lance en mode détaché
          sudo docker compose -f docker-compose.yml up --build -d --force-recreate
          echo "Déploiement terminé. Le jeu est accessible sur http://${{ secrets.VM_HOST }}"
        EOF
